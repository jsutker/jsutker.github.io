<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joe Sutker's Blog]]></title>
  <link href="http://jsutker.github.io/atom.xml" rel="self"/>
  <link href="http://jsutker.github.io/"/>
  <updated>2015-07-20T08:44:49-04:00</updated>
  <id>http://jsutker.github.io/</id>
  <author>
    <name><![CDATA[Joseph Sutker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fore!!! How to Code Golf, As Told By an Amateur]]></title>
    <link href="http://jsutker.github.io/blog/2015/07/16/fore-how-to-code-golf/"/>
    <updated>2015-07-16T11:00:20-04:00</updated>
    <id>http://jsutker.github.io/blog/2015/07/16/fore-how-to-code-golf</id>
    <content type="html"><![CDATA[<p>Code Golf is not teaching a robot to get angry while swinging an expensive piece of metal at a little, white ball. It&rsquo;s trying to use as few bytes to get an intended outcome. There are certain languages that are built for Code Golf (taking very few bytes to get things done), like GolfScript or Flogscript, but they look absolutely ridiculous.
For example, this GolfScript code prints 1000 digits of pi (source: Wikipedia):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;''
</span><span class='line'>6666,-2%{2+.2/@*\/10.3??2*+}*
</span><span class='line'>`50&lt;~\; #truncate for webpage purposes
</span><span class='line'> -&gt; 3141592653589793238462643383279502884197169399375</span></code></pre></td></tr></table></div></figure>


<p>Seriously, how frustrating does that look? Very much so, in my opinion. I prefer Code Golfing with easy to read languages so that programmers can read the lyte code.</p>

<p>&nbsp;</p>


<div width="50%" align="center"><img src="http://kenstonlocal.org/kenston/wp-content/uploads/2014/12/css_code.jpg" title="For some reason, a lot of the pictures of code that I could find were CSS. I think that says something about the average person's perception of code, but I'm not sure what." width="50%"></div>


<h5 align="center">Get it? Lyte, as in a mixture of byte and lite? No? Screw it.</h5>


<p>Ok, let&rsquo;s get golfing. We&rsquo;re going to use FizzBuzz as our example. If you don&rsquo;t know what FizzBuzz is, it&rsquo;s a program that you give an integer as input. If the integer is divisible by 3, it returns &ldquo;Fizz&rdquo;, if it&rsquo;s divisible by 5, it returns &ldquo;Buzz&rdquo;, and if it&rsquo;s divisible by both, it returns &ldquo;FizzBuzz&rdquo;. In our version, it returns the original number if it&rsquo;s divisible by neither.</p>

<p>And let&rsquo;s code it in JavaScript. Why? Because I want to, that&rsquo;s why. Here&rsquo;s a version of FizzBuzz I&rsquo;ve already coded, and it looks nicely coded, but horrible for code golf:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fizzbuzz</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span> <span class="o">+=</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span> <span class="o">+=</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">a</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">n</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we look for a few places where it can be shortened. For example, that last if-else statement looks like a good place for a ternary operator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fizzbuzz</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span> <span class="o">+=</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span> <span class="o">+=</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span> <span class="o">?</span> <span class="nx">a</span> <span class="o">:</span> <span class="nx">n</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, there&rsquo;s a nifty thing in JavaScript, where you can just do &ldquo;||&rdquo; instead if the first part of the ternary operator is the same as the second part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fizzbuzz</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span> <span class="o">+=</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span> <span class="o">+=</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span> <span class="o">||</span> <span class="nx">n</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now let&rsquo;s get rid of all of those pesky unnecessary semicolons, spaces, and newline characters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">fizzbuzz</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">3</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;Fizz&quot;</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">5</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;Buzz&quot;</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="o">||</span><span class="nx">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a final touch, let&rsquo;s replace the === with ==, since we know that both n and 0 are integers, so we don&rsquo;t care about type comparison:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">fizzbuzz</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;Fizz&quot;</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">5</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;Buzz&quot;</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="o">||</span><span class="nx">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And let&rsquo;s rename our function to &ldquo;f&rdquo;, while we&rsquo;re at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;Fizz&quot;</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">5</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;Buzz&quot;</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="o">||</span><span class="nx">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! We&rsquo;re down to 94 bytes! Awesome! This is as much as I&rsquo;ve figured out how to code golf, while still using moderately proper code (using and enforcing local variables only, instead of just using global variables is a big part of that).</p>

<p>One last thing to remember while Code Golfing: Even though you may love your function, there could still be others that can inherently out-golf you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=!</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">3</span><span class="p">),</span><span class="nx">b</span><span class="o">=!</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">5</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="o">?</span><span class="s2">&quot;FizzBuzz&quot;</span><span class="o">:</span><span class="s2">&quot;Fizz&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">?</span><span class="s2">&quot;Buzz&quot;</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; 93 bytes. F***.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Write a Blog Post]]></title>
    <link href="http://jsutker.github.io/blog/2015/07/06/how-not-to-write-a-blog-post/"/>
    <updated>2015-07-06T09:21:19-04:00</updated>
    <id>http://jsutker.github.io/blog/2015/07/06/how-not-to-write-a-blog-post</id>
    <content type="html"><![CDATA[<p>So, you&rsquo;re writing a blog post. Good for you, you&rsquo;re putting your unique voice out into the eternal void of pain and suffering, known nowadays as the Internet!</p>

<p>&nbsp;</p>


<div width="50%" align="center"><img src="https://static.pexels.com/photos/6709/vintage-grey-airplane-plane.jpg" title="Welcome to the Internet!" width="50%"></div>


<h5 align="center">Pictured: the Internet</h5>


<p>If you want to write a good blog post, there are a few things you want to avoid at all costs&hellip;</p>

<h3>Research is good, distractions are not</h3>

<p>Look, I get you&rsquo;re doing your blog on Sinatra, but that doesn&rsquo;t mean you should be going on Sinatra-based websites and playing games. You need to keep yourself focused on this blog, or else you&rsquo;re going to wake up the next day covered in the Internet, and while that may seem awesome, it&rsquo;s not. Trust me.</p>

<p>&nbsp;</p>


<div width="50%" align="center"><img src="https://static.pexels.com/photos/2740/nature-animal-fur-dangerous.jpg" title="Shame on you." width="50%"></div>


<h5 align="center">He's seen your browser history. Does he look amused to you?</h5>


<h3>Don&rsquo;t go with a topic because it was the first thing you thought of</h3>

<p>Spend at least a little more time coming up with something interesting! If you&rsquo;re dreading writing the blog post, your users will dread reading it. Make it interesting, or people will take out every device they own and shut them off just to know for <em>sure</em> that your blog isn&rsquo;t open on any of them.</p>

<p>&nbsp;</p>


<div width="50%" align="center"><img src="http://s28.postimg.org/edv2lqpdp/PS2_Test_Blackscreen.png" title="So interesting." width="50%"></div>


<h5 align="center">Look at all of the things that are less interesting than your post.</h5>


<p>If you write about a topic that you don&rsquo;t care about, you&rsquo;re basically saying to your readers, &ldquo;Haha, screw you! I hate you so much that I&rsquo;m putting myself through mental and emotional pain just to bring you this boring content! Take that!&rdquo; Seriously, why would you say that? You must really be a jerk.</p>

<h3>Don&rsquo;t assume things about your readers</h3>

<p>You know what you&rsquo;re doing. Stop that.</p>

<h3>Avoid making the title of a section way longer than it needs to be, even if you can&rsquo;t figure out how to end the title because &ldquo;that&rsquo;s, like, really hard, man&rdquo;</h3>

<p>Yeah,&hellip; that.</p>

<h3>Don&rsquo;t make the content too short</h3>

<p>Especially for three sections in a row.</p>

<h3>Be consistent</h3>

<p>&nbsp;</p>


<div width="50%" align="center"><img src="https://static.pexels.com/photos/6389/hand-vintage-old-book.jpg" title='"Huh, so this is the Internet."' width="50%"></div>


<h5 align="center">"Where are all the pictures?"</h5>


<h3>Watch out for spelling mistakes</h3>

<p>Just like in code, a spelling mistake can ruin an entire blog pots.</p>

<h3>Don&rsquo;t end it too abruptly</h3>

<p>Especially avoid ending it in the middle of a word or sentence.</p>

<h3>And most importantly, avoi</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Operators are Awesome]]></title>
    <link href="http://jsutker.github.io/blog/2015/06/15/%7C%7C-awesome-operators-are-awesome/"/>
    <updated>2015-06-15T09:00:00-04:00</updated>
    <id>http://jsutker.github.io/blog/2015/06/15/||-awesome-operators-are-awesome</id>
    <content type="html"><![CDATA[<h1>||=</h1>

<p>Or-equals, pipe-pipe-equals, double-pipe-equals, whatever you want to call it, this thing is awesome. Let me tell you why.</p>

<h3>Why It&rsquo;s Awesome:</h3>

<p>Let&rsquo;s say you&rsquo;re writing some code. It&rsquo;s some pretty damn good code, but you have this variable that might be set to something, it might not. What&rsquo;re you gonna do? You&rsquo;re gonna use ||=, that&rsquo;s what.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;You get to input something!&quot;</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;You don&#39;t get to input anything!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">statement</span> <span class="o">||=</span> <span class="s2">&quot;This is a default statement.&quot;</span>
</span><span class='line'><span class="n">statement</span>
</span><span class='line'><span class="c1">#=&gt; &quot;This is a default statement.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wasn&rsquo;t that awesome? You&rsquo;re damn right it was awesome.</p>

<hr />

<h1>defined?</h1>

<p>This one is simple, it&rsquo;s called &ldquo;defined?&rdquo;. No ambiguity there. I bet you can guess what it does.</p>

<h3>Why It&rsquo;s Awesome:</h3>

<p>Just in case you weren&rsquo;t convinced by ||=, this bad boy checks if your variable is defined. If not, it doesn&rsquo;t throw a hissy-fit, it&rsquo;s just like &ldquo;Nah man, this thing doesn&rsquo;t exist, so I&rsquo;m gonna throw you a nil.&rdquo; It&rsquo;s a bro.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">example1</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="k">def</span> <span class="nf">example2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vg">$example3</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">defined?</span> <span class="n">example1</span> <span class="c1">#=&gt; &quot;local-variable&quot;</span>
</span><span class='line'><span class="n">defined?</span> <span class="n">example2</span> <span class="c1">#=&gt; &quot;method&quot;</span>
</span><span class='line'><span class="n">defined?</span> <span class="vg">$example3</span> <span class="c1">#=&gt; &quot;global-variable&quot;</span>
</span><span class='line'><span class="n">defined?</span> <span class="n">example4</span> <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was pretty awesome. But that&rsquo;s not all it can do. You can use it in a method as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">example5</span>
</span><span class='line'>  <span class="n">defined?</span> <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="n">example6</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">count</span>
</span><span class='line'>    <span class="n">defined?</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">example5</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="p">}</span> <span class="c1">#=&gt; &quot;yield&quot;</span>
</span><span class='line'><span class="n">example6</span><span class="o">.</span><span class="n">count</span> <span class="c1">#=&gt; &quot;super&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was pretty damn awesome.</p>

<hr />

<h1>&lt;=></h1>

<p>This is our last awesome operator for this post. It looks like the intense hybrid of less-than-or-equal-to, greater-than-or-equal-to, and a TIE Fighter. That in and of itself is awesome, but it gets better.</p>

<h3>Why It&rsquo;s Awesome:</h3>

<p>So which comparison do we want to use for two different pieces of data, less-than, equals, or greater-than? Yes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span> <span class="c1">#=&gt; -1</span>
</span><span class='line'><span class="n">b</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span> <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span> <span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>See that? If the first one&rsquo;s bigger, it gives you -1. If the second one&rsquo;s bigger, it gives you 1. They&rsquo;re the same? You get 0, because of course you do.</p>

<hr />

<p>Are these operators awesome? Yes.
Am I overreacting to how awesome they are? Probably.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Scope: An Analogy]]></title>
    <link href="http://jsutker.github.io/blog/2015/06/09/variable-scope-an-analogy/"/>
    <updated>2015-06-09T08:39:10-04:00</updated>
    <id>http://jsutker.github.io/blog/2015/06/09/variable-scope-an-analogy</id>
    <content type="html"><![CDATA[<p>During a lecture, there was a discussion on variable scope, which sparked an idea for an analogy. Picture this:</p>

<p>Welcome to Rubyland, land of many things. In Rubyland, there are castles (methods) and there are pits (blocks). Whenever a knight (variable) comes into being, he is given a weapon (value), tied down to where he was created by a giant rope.</p>

<p>Let&rsquo;s create a knight outside of all of the castles and pits, in the main part of Rubyland. We&rsquo;ll call him sir_variable. Our knight, sir_variable, can&rsquo;t get over the walls of the castle, so nobody there knows he exists (but none of the knights from the castle can get out either, so it&rsquo;s fair). He could easily jump into pits, exchange his sword for a handy new battleaxe if he so pleases, and climb up his rope right out.</p>

<p>Now let&rsquo;s create another knight, sir_reference. He was created in a pit, where he&rsquo;s been fighting hashes and going on quests. No matter what, he doesn&rsquo;t have a rope to climb that could bring him up and out of the pit, because his rope is all in the pit.</p>

<p>And that is how variable scope works. So remember kids, always keep your variables in scope, or you might find yourself in a battle without a weapon.</p>
]]></content>
  </entry>
  
</feed>
